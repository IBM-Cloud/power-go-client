// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkPeer network peer
//
// swagger:model NetworkPeer
type NetworkPeer struct {

	// ASN number at customer network side
	// Example: 64512
	CustomerASN int64 `json:"customerASN,omitempty"`

	// IP address used for configuring customer network interface with network subnet mask. customerCidr and ibmCidr must have matching network and subnet mask values.
	// Example: 192.168.91.2/30
	CustomerCidr string `json:"customerCidr,omitempty"`

	// default action for export route filter
	// * allow: allow
	// * deny: deny
	//
	// Example: allow
	// Required: true
	// Enum: ["allow","deny"]
	DefaultExportRouteFilter *string `json:"defaultExportRouteFilter"`

	// default action for import route filter
	// * allow: allow
	// * deny: deny
	//
	// Example: allow
	// Required: true
	// Enum: ["allow","deny"]
	DefaultImportRouteFilter *string `json:"defaultImportRouteFilter"`

	// List of export route filters
	// Required: true
	ExportRouteFilters []*RouteFilter `json:"exportRouteFilters"`

	// ASN number at IBM PowerVS side
	// Example: 64512
	IbmASN int64 `json:"ibmASN,omitempty"`

	// IP address used for configuring IBM network interface with network subnet mask. customerCidr and ibmCidr must have matching network and subnet mask values.
	// Example: 192.168.91.1/30
	IbmCidr string `json:"ibmCidr,omitempty"`

	// network peer id
	// Example: 031ab7da-bca6-493f-ac55-1a2a26f19160
	// Required: true
	ID *string `json:"id"`

	// List of import route filters
	// Required: true
	ImportRouteFilters []*RouteFilter `json:"importRouteFilters"`

	// user defined name
	// Example: newPeerNetwork
	// Required: true
	Name *string `json:"name"`

	// peer interface id. use API '/v1/network-peers/interfaces' to get a list of valid peer interface id
	// Example: 031ab7da-bca6-493f-ac55-1a2a26f19160
	PeerInterfaceID string `json:"peerInterfaceID,omitempty"`

	// type of the peer network
	// * dcnetwork_bgp: broader gateway protocol is used to share routes between two autonomous network
	//
	// Example: dcnetwork_bgp
	// Required: true
	// Enum: ["dcnetwork_bgp"]
	Type *string `json:"type"`

	// A vlan configured at the customer network.
	// Example: 2000
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this network peer
func (m *NetworkPeer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultExportRouteFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultImportRouteFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportRouteFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportRouteFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkPeerTypeDefaultExportRouteFilterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPeerTypeDefaultExportRouteFilterPropEnum = append(networkPeerTypeDefaultExportRouteFilterPropEnum, v)
	}
}

const (

	// NetworkPeerDefaultExportRouteFilterAllow captures enum value "allow"
	NetworkPeerDefaultExportRouteFilterAllow string = "allow"

	// NetworkPeerDefaultExportRouteFilterDeny captures enum value "deny"
	NetworkPeerDefaultExportRouteFilterDeny string = "deny"
)

// prop value enum
func (m *NetworkPeer) validateDefaultExportRouteFilterEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkPeerTypeDefaultExportRouteFilterPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkPeer) validateDefaultExportRouteFilter(formats strfmt.Registry) error {

	if err := validate.Required("defaultExportRouteFilter", "body", m.DefaultExportRouteFilter); err != nil {
		return err
	}

	// value enum
	if err := m.validateDefaultExportRouteFilterEnum("defaultExportRouteFilter", "body", *m.DefaultExportRouteFilter); err != nil {
		return err
	}

	return nil
}

var networkPeerTypeDefaultImportRouteFilterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPeerTypeDefaultImportRouteFilterPropEnum = append(networkPeerTypeDefaultImportRouteFilterPropEnum, v)
	}
}

const (

	// NetworkPeerDefaultImportRouteFilterAllow captures enum value "allow"
	NetworkPeerDefaultImportRouteFilterAllow string = "allow"

	// NetworkPeerDefaultImportRouteFilterDeny captures enum value "deny"
	NetworkPeerDefaultImportRouteFilterDeny string = "deny"
)

// prop value enum
func (m *NetworkPeer) validateDefaultImportRouteFilterEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkPeerTypeDefaultImportRouteFilterPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkPeer) validateDefaultImportRouteFilter(formats strfmt.Registry) error {

	if err := validate.Required("defaultImportRouteFilter", "body", m.DefaultImportRouteFilter); err != nil {
		return err
	}

	// value enum
	if err := m.validateDefaultImportRouteFilterEnum("defaultImportRouteFilter", "body", *m.DefaultImportRouteFilter); err != nil {
		return err
	}

	return nil
}

func (m *NetworkPeer) validateExportRouteFilters(formats strfmt.Registry) error {

	if err := validate.Required("exportRouteFilters", "body", m.ExportRouteFilters); err != nil {
		return err
	}

	for i := 0; i < len(m.ExportRouteFilters); i++ {
		if swag.IsZero(m.ExportRouteFilters[i]) { // not required
			continue
		}

		if m.ExportRouteFilters[i] != nil {
			if err := m.ExportRouteFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkPeer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NetworkPeer) validateImportRouteFilters(formats strfmt.Registry) error {

	if err := validate.Required("importRouteFilters", "body", m.ImportRouteFilters); err != nil {
		return err
	}

	for i := 0; i < len(m.ImportRouteFilters); i++ {
		if swag.IsZero(m.ImportRouteFilters[i]) { // not required
			continue
		}

		if m.ImportRouteFilters[i] != nil {
			if err := m.ImportRouteFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkPeer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var networkPeerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dcnetwork_bgp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPeerTypeTypePropEnum = append(networkPeerTypeTypePropEnum, v)
	}
}

const (

	// NetworkPeerTypeDcnetworkBgp captures enum value "dcnetwork_bgp"
	NetworkPeerTypeDcnetworkBgp string = "dcnetwork_bgp"
)

// prop value enum
func (m *NetworkPeer) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkPeerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkPeer) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this network peer based on the context it is used
func (m *NetworkPeer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExportRouteFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportRouteFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkPeer) contextValidateExportRouteFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExportRouteFilters); i++ {

		if m.ExportRouteFilters[i] != nil {

			if swag.IsZero(m.ExportRouteFilters[i]) { // not required
				return nil
			}

			if err := m.ExportRouteFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkPeer) contextValidateImportRouteFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImportRouteFilters); i++ {

		if m.ImportRouteFilters[i] != nil {

			if swag.IsZero(m.ImportRouteFilters[i]) { // not required
				return nil
			}

			if err := m.ImportRouteFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkPeer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkPeer) UnmarshalBinary(b []byte) error {
	var res NetworkPeer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
