// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkPeer network peer
//
// swagger:model NetworkPeer
type NetworkPeer struct {
	NetworkPeerBase

	// network peer id
	// Example: 031ab7da-bca6-493f-ac55-1a2a26f19160
	// Required: true
	ID *string `json:"ID"`

	// List of export route filters
	// Required: true
	ExportRouteFilters []*RouteFilter `json:"exportRouteFilters"`

	// List of import route filters
	// Required: true
	ImportRouteFilters []*RouteFilter `json:"importRouteFilters"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NetworkPeer) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 NetworkPeerBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.NetworkPeerBase = aO0

	// now for regular properties
	var propsNetworkPeer struct {
		ID *string `json:"ID"`

		ExportRouteFilters []*RouteFilter `json:"exportRouteFilters"`

		ImportRouteFilters []*RouteFilter `json:"importRouteFilters"`
	}
	if err := swag.ReadJSON(raw, &propsNetworkPeer); err != nil {
		return err
	}
	m.ID = propsNetworkPeer.ID

	m.ExportRouteFilters = propsNetworkPeer.ExportRouteFilters

	m.ImportRouteFilters = propsNetworkPeer.ImportRouteFilters

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NetworkPeer) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.NetworkPeerBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsNetworkPeer struct {
		ID *string `json:"ID"`

		ExportRouteFilters []*RouteFilter `json:"exportRouteFilters"`

		ImportRouteFilters []*RouteFilter `json:"importRouteFilters"`
	}
	propsNetworkPeer.ID = m.ID

	propsNetworkPeer.ExportRouteFilters = m.ExportRouteFilters

	propsNetworkPeer.ImportRouteFilters = m.ImportRouteFilters

	jsonDataPropsNetworkPeer, errNetworkPeer := swag.WriteJSON(propsNetworkPeer)
	if errNetworkPeer != nil {
		return nil, errNetworkPeer
	}
	_parts = append(_parts, jsonDataPropsNetworkPeer)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this network peer
func (m *NetworkPeer) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with NetworkPeerBase
	if err := m.NetworkPeerBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExportRouteFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportRouteFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkPeer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NetworkPeer) validateExportRouteFilters(formats strfmt.Registry) error {

	if err := validate.Required("exportRouteFilters", "body", m.ExportRouteFilters); err != nil {
		return err
	}

	for i := 0; i < len(m.ExportRouteFilters); i++ {
		if swag.IsZero(m.ExportRouteFilters[i]) { // not required
			continue
		}

		if m.ExportRouteFilters[i] != nil {
			if err := m.ExportRouteFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkPeer) validateImportRouteFilters(formats strfmt.Registry) error {

	if err := validate.Required("importRouteFilters", "body", m.ImportRouteFilters); err != nil {
		return err
	}

	for i := 0; i < len(m.ImportRouteFilters); i++ {
		if swag.IsZero(m.ImportRouteFilters[i]) { // not required
			continue
		}

		if m.ImportRouteFilters[i] != nil {
			if err := m.ImportRouteFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this network peer based on the context it is used
func (m *NetworkPeer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with NetworkPeerBase
	if err := m.NetworkPeerBase.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExportRouteFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportRouteFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkPeer) contextValidateExportRouteFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExportRouteFilters); i++ {

		if m.ExportRouteFilters[i] != nil {

			if swag.IsZero(m.ExportRouteFilters[i]) { // not required
				return nil
			}

			if err := m.ExportRouteFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exportRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkPeer) contextValidateImportRouteFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImportRouteFilters); i++ {

		if m.ImportRouteFilters[i] != nil {

			if swag.IsZero(m.ImportRouteFilters[i]) { // not required
				return nil
			}

			if err := m.ImportRouteFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("importRouteFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkPeer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkPeer) UnmarshalBinary(b []byte) error {
	var res NetworkPeer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
