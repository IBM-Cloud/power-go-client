// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SAPProfile s a p profile
//
// swagger:model SAPProfile
type SAPProfile struct {

	// Has certification been performed on profile
	// Required: true
	Certified *bool `json:"certified"`

	// Amount of cores
	// Required: true
	Cores *int64 `json:"cores"`

	// Requires full system for deployment
	// Required: true
	FullSystemProfile *bool `json:"fullSystemProfile"`

	// Amount of memory (in GB)
	// Required: true
	Memory *int64 `json:"memory"`

	// SAP Profile ID
	// Required: true
	ProfileID *string `json:"profileID"`

	// SAP Application Performance Standard
	// Required: true
	Saps *int64 `json:"saps"`

	// List of supported systems
	SupportedSystems []string `json:"supportedSystems"`

	// Type of profile
	// Required: true
	// Enum: [balanced compute memory non-production ultra-memory small SAP Rise Optimized]
	Type *string `json:"type"`

	// Workload Type
	// Required: true
	// Enum: [N/A OLAP OLTP OLAP/OLTP]
	WorkloadType *string `json:"workloadType"`
}

// Validate validates this s a p profile
func (m *SAPProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullSystemProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSaps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SAPProfile) validateCertified(formats strfmt.Registry) error {

	if err := validate.Required("certified", "body", m.Certified); err != nil {
		return err
	}

	return nil
}

func (m *SAPProfile) validateCores(formats strfmt.Registry) error {

	if err := validate.Required("cores", "body", m.Cores); err != nil {
		return err
	}

	return nil
}

func (m *SAPProfile) validateFullSystemProfile(formats strfmt.Registry) error {

	if err := validate.Required("fullSystemProfile", "body", m.FullSystemProfile); err != nil {
		return err
	}

	return nil
}

func (m *SAPProfile) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *SAPProfile) validateProfileID(formats strfmt.Registry) error {

	if err := validate.Required("profileID", "body", m.ProfileID); err != nil {
		return err
	}

	return nil
}

func (m *SAPProfile) validateSaps(formats strfmt.Registry) error {

	if err := validate.Required("saps", "body", m.Saps); err != nil {
		return err
	}

	return nil
}

var sAPProfileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["balanced","compute","memory","non-production","ultra-memory","small","SAP Rise Optimized"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sAPProfileTypeTypePropEnum = append(sAPProfileTypeTypePropEnum, v)
	}
}

const (

	// SAPProfileTypeBalanced captures enum value "balanced"
	SAPProfileTypeBalanced string = "balanced"

	// SAPProfileTypeCompute captures enum value "compute"
	SAPProfileTypeCompute string = "compute"

	// SAPProfileTypeMemory captures enum value "memory"
	SAPProfileTypeMemory string = "memory"

	// SAPProfileTypeNonDashProduction captures enum value "non-production"
	SAPProfileTypeNonDashProduction string = "non-production"

	// SAPProfileTypeUltraDashMemory captures enum value "ultra-memory"
	SAPProfileTypeUltraDashMemory string = "ultra-memory"

	// SAPProfileTypeSmall captures enum value "small"
	SAPProfileTypeSmall string = "small"

	// SAPProfileTypeSAPRiseOptimized captures enum value "SAP Rise Optimized"
	SAPProfileTypeSAPRiseOptimized string = "SAP Rise Optimized"
)

// prop value enum
func (m *SAPProfile) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sAPProfileTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SAPProfile) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var sAPProfileTypeWorkloadTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["N/A","OLAP","OLTP","OLAP/OLTP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sAPProfileTypeWorkloadTypePropEnum = append(sAPProfileTypeWorkloadTypePropEnum, v)
	}
}

const (

	// SAPProfileWorkloadTypeNA captures enum value "N/A"
	SAPProfileWorkloadTypeNA string = "N/A"

	// SAPProfileWorkloadTypeOLAP captures enum value "OLAP"
	SAPProfileWorkloadTypeOLAP string = "OLAP"

	// SAPProfileWorkloadTypeOLTP captures enum value "OLTP"
	SAPProfileWorkloadTypeOLTP string = "OLTP"

	// SAPProfileWorkloadTypeOLAPOLTP captures enum value "OLAP/OLTP"
	SAPProfileWorkloadTypeOLAPOLTP string = "OLAP/OLTP"
)

// prop value enum
func (m *SAPProfile) validateWorkloadTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sAPProfileTypeWorkloadTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SAPProfile) validateWorkloadType(formats strfmt.Registry) error {

	if err := validate.Required("workloadType", "body", m.WorkloadType); err != nil {
		return err
	}

	// value enum
	if err := m.validateWorkloadTypeEnum("workloadType", "body", *m.WorkloadType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s a p profile based on context it is used
func (m *SAPProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SAPProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SAPProfile) UnmarshalBinary(b []byte) error {
	var res SAPProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
