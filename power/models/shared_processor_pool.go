// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SharedProcessorPool shared processor pool
//
// swagger:model SharedProcessorPool
type SharedProcessorPool struct {

	// The available processor units for the Shared Processor Pool
	Available float64 `json:"available,omitempty"`

	// The failure reason
	FailureReason string `json:"failureReason,omitempty"`

	// The host where the Shared Processor Pool resides
	Host string `json:"host,omitempty"`

	// The id of the Shared Processor Pool
	// Required: true
	ID *string `json:"id"`

	// The maximum number of processors defined for the Shared Processor Pool
	// Required: true
	MaxProcUnits *float64 `json:"maxProcUnits"`

	// The name of the Shared Processor Pool
	// Required: true
	Name *string `json:"name"`

	// Current status for the Shared Processor Pool
	Status string `json:"status,omitempty"`

	// The processor units utilization for the Shared Processor Pool
	Utilization float64 `json:"utilization,omitempty"`
}

// Validate validates this shared processor pool
func (m *SharedProcessorPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxProcUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SharedProcessorPool) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SharedProcessorPool) validateMaxProcUnits(formats strfmt.Registry) error {

	if err := validate.Required("maxProcUnits", "body", m.MaxProcUnits); err != nil {
		return err
	}

	return nil
}

func (m *SharedProcessorPool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shared processor pool based on context it is used
func (m *SharedProcessorPool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SharedProcessorPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SharedProcessorPool) UnmarshalBinary(b []byte) error {
	var res SharedProcessorPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
