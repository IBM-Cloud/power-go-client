// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteFilter route filter
//
// swagger:model RouteFilter
type RouteFilter struct {
	RouteFilterBase

	// route filter ID
	// Example: 031ab7da-bca6-493f-ac55-1a2a26f19160
	// Required: true
	RouteFilterID *string `json:"routeFilterID"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RouteFilter) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RouteFilterBase
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.RouteFilterBase = aO0

	// now for regular properties
	var propsRouteFilter struct {
		RouteFilterID *string `json:"routeFilterID"`
	}
	if err := swag.ReadJSON(raw, &propsRouteFilter); err != nil {
		return err
	}
	m.RouteFilterID = propsRouteFilter.RouteFilterID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RouteFilter) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.RouteFilterBase)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRouteFilter struct {
		RouteFilterID *string `json:"routeFilterID"`
	}
	propsRouteFilter.RouteFilterID = m.RouteFilterID

	jsonDataPropsRouteFilter, errRouteFilter := swag.WriteJSON(propsRouteFilter)
	if errRouteFilter != nil {
		return nil, errRouteFilter
	}
	_parts = append(_parts, jsonDataPropsRouteFilter)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route filter
func (m *RouteFilter) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RouteFilterBase
	if err := m.RouteFilterBase.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteFilterID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteFilter) validateRouteFilterID(formats strfmt.Registry) error {

	if err := validate.Required("routeFilterID", "body", m.RouteFilterID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this route filter based on the context it is used
func (m *RouteFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RouteFilterBase
	if err := m.RouteFilterBase.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *RouteFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteFilter) UnmarshalBinary(b []byte) error {
	var res RouteFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
