// Code generated by go-swagger; DO NOT EDIT.

package hostgroups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1HostgroupsIDPutReader is a Reader for the V1HostgroupsIDPut structure.
type V1HostgroupsIDPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostgroupsIDPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1HostgroupsIDPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostgroupsIDPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1HostgroupsIDPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostgroupsIDPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewV1HostgroupsIDPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewV1HostgroupsIDPutConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostgroupsIDPutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1HostgroupsIDPutGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/hostgroups/{hostgroup_id}] v1.hostgroups.id.put", response, response.Code())
	}
}

// NewV1HostgroupsIDPutOK creates a V1HostgroupsIDPutOK with default headers values
func NewV1HostgroupsIDPutOK() *V1HostgroupsIDPutOK {
	return &V1HostgroupsIDPutOK{}
}

/*
V1HostgroupsIDPutOK describes a response with status code 200, with default header values.

OK
*/
type V1HostgroupsIDPutOK struct {
	Payload *models.HostgroupWithSharingInfo
}

// IsSuccess returns true when this v1 hostgroups Id put o k response has a 2xx status code
func (o *V1HostgroupsIDPutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 hostgroups Id put o k response has a 3xx status code
func (o *V1HostgroupsIDPutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put o k response has a 4xx status code
func (o *V1HostgroupsIDPutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups Id put o k response has a 5xx status code
func (o *V1HostgroupsIDPutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups Id put o k response a status code equal to that given
func (o *V1HostgroupsIDPutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 hostgroups Id put o k response
func (o *V1HostgroupsIDPutOK) Code() int {
	return 200
}

func (o *V1HostgroupsIDPutOK) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutOK  %+v", 200, o.Payload)
}

func (o *V1HostgroupsIDPutOK) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutOK  %+v", 200, o.Payload)
}

func (o *V1HostgroupsIDPutOK) GetPayload() *models.HostgroupWithSharingInfo {
	return o.Payload
}

func (o *V1HostgroupsIDPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HostgroupWithSharingInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsIDPutBadRequest creates a V1HostgroupsIDPutBadRequest with default headers values
func NewV1HostgroupsIDPutBadRequest() *V1HostgroupsIDPutBadRequest {
	return &V1HostgroupsIDPutBadRequest{}
}

/*
V1HostgroupsIDPutBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostgroupsIDPutBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups Id put bad request response has a 2xx status code
func (o *V1HostgroupsIDPutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups Id put bad request response has a 3xx status code
func (o *V1HostgroupsIDPutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put bad request response has a 4xx status code
func (o *V1HostgroupsIDPutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups Id put bad request response has a 5xx status code
func (o *V1HostgroupsIDPutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups Id put bad request response a status code equal to that given
func (o *V1HostgroupsIDPutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 hostgroups Id put bad request response
func (o *V1HostgroupsIDPutBadRequest) Code() int {
	return 400
}

func (o *V1HostgroupsIDPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostgroupsIDPutBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostgroupsIDPutBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsIDPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsIDPutUnauthorized creates a V1HostgroupsIDPutUnauthorized with default headers values
func NewV1HostgroupsIDPutUnauthorized() *V1HostgroupsIDPutUnauthorized {
	return &V1HostgroupsIDPutUnauthorized{}
}

/*
V1HostgroupsIDPutUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1HostgroupsIDPutUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups Id put unauthorized response has a 2xx status code
func (o *V1HostgroupsIDPutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups Id put unauthorized response has a 3xx status code
func (o *V1HostgroupsIDPutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put unauthorized response has a 4xx status code
func (o *V1HostgroupsIDPutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups Id put unauthorized response has a 5xx status code
func (o *V1HostgroupsIDPutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups Id put unauthorized response a status code equal to that given
func (o *V1HostgroupsIDPutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 hostgroups Id put unauthorized response
func (o *V1HostgroupsIDPutUnauthorized) Code() int {
	return 401
}

func (o *V1HostgroupsIDPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutUnauthorized  %+v", 401, o.Payload)
}

func (o *V1HostgroupsIDPutUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutUnauthorized  %+v", 401, o.Payload)
}

func (o *V1HostgroupsIDPutUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsIDPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsIDPutForbidden creates a V1HostgroupsIDPutForbidden with default headers values
func NewV1HostgroupsIDPutForbidden() *V1HostgroupsIDPutForbidden {
	return &V1HostgroupsIDPutForbidden{}
}

/*
V1HostgroupsIDPutForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostgroupsIDPutForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups Id put forbidden response has a 2xx status code
func (o *V1HostgroupsIDPutForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups Id put forbidden response has a 3xx status code
func (o *V1HostgroupsIDPutForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put forbidden response has a 4xx status code
func (o *V1HostgroupsIDPutForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups Id put forbidden response has a 5xx status code
func (o *V1HostgroupsIDPutForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups Id put forbidden response a status code equal to that given
func (o *V1HostgroupsIDPutForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 hostgroups Id put forbidden response
func (o *V1HostgroupsIDPutForbidden) Code() int {
	return 403
}

func (o *V1HostgroupsIDPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutForbidden  %+v", 403, o.Payload)
}

func (o *V1HostgroupsIDPutForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutForbidden  %+v", 403, o.Payload)
}

func (o *V1HostgroupsIDPutForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsIDPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsIDPutNotFound creates a V1HostgroupsIDPutNotFound with default headers values
func NewV1HostgroupsIDPutNotFound() *V1HostgroupsIDPutNotFound {
	return &V1HostgroupsIDPutNotFound{}
}

/*
V1HostgroupsIDPutNotFound describes a response with status code 404, with default header values.

Not Found
*/
type V1HostgroupsIDPutNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups Id put not found response has a 2xx status code
func (o *V1HostgroupsIDPutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups Id put not found response has a 3xx status code
func (o *V1HostgroupsIDPutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put not found response has a 4xx status code
func (o *V1HostgroupsIDPutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups Id put not found response has a 5xx status code
func (o *V1HostgroupsIDPutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups Id put not found response a status code equal to that given
func (o *V1HostgroupsIDPutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the v1 hostgroups Id put not found response
func (o *V1HostgroupsIDPutNotFound) Code() int {
	return 404
}

func (o *V1HostgroupsIDPutNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutNotFound  %+v", 404, o.Payload)
}

func (o *V1HostgroupsIDPutNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutNotFound  %+v", 404, o.Payload)
}

func (o *V1HostgroupsIDPutNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsIDPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsIDPutConflict creates a V1HostgroupsIDPutConflict with default headers values
func NewV1HostgroupsIDPutConflict() *V1HostgroupsIDPutConflict {
	return &V1HostgroupsIDPutConflict{}
}

/*
V1HostgroupsIDPutConflict describes a response with status code 409, with default header values.

Conflict
*/
type V1HostgroupsIDPutConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups Id put conflict response has a 2xx status code
func (o *V1HostgroupsIDPutConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups Id put conflict response has a 3xx status code
func (o *V1HostgroupsIDPutConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put conflict response has a 4xx status code
func (o *V1HostgroupsIDPutConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups Id put conflict response has a 5xx status code
func (o *V1HostgroupsIDPutConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups Id put conflict response a status code equal to that given
func (o *V1HostgroupsIDPutConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the v1 hostgroups Id put conflict response
func (o *V1HostgroupsIDPutConflict) Code() int {
	return 409
}

func (o *V1HostgroupsIDPutConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutConflict  %+v", 409, o.Payload)
}

func (o *V1HostgroupsIDPutConflict) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutConflict  %+v", 409, o.Payload)
}

func (o *V1HostgroupsIDPutConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsIDPutConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsIDPutInternalServerError creates a V1HostgroupsIDPutInternalServerError with default headers values
func NewV1HostgroupsIDPutInternalServerError() *V1HostgroupsIDPutInternalServerError {
	return &V1HostgroupsIDPutInternalServerError{}
}

/*
V1HostgroupsIDPutInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostgroupsIDPutInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups Id put internal server error response has a 2xx status code
func (o *V1HostgroupsIDPutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups Id put internal server error response has a 3xx status code
func (o *V1HostgroupsIDPutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put internal server error response has a 4xx status code
func (o *V1HostgroupsIDPutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups Id put internal server error response has a 5xx status code
func (o *V1HostgroupsIDPutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hostgroups Id put internal server error response a status code equal to that given
func (o *V1HostgroupsIDPutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 hostgroups Id put internal server error response
func (o *V1HostgroupsIDPutInternalServerError) Code() int {
	return 500
}

func (o *V1HostgroupsIDPutInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostgroupsIDPutInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostgroupsIDPutInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsIDPutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsIDPutGatewayTimeout creates a V1HostgroupsIDPutGatewayTimeout with default headers values
func NewV1HostgroupsIDPutGatewayTimeout() *V1HostgroupsIDPutGatewayTimeout {
	return &V1HostgroupsIDPutGatewayTimeout{}
}

/*
V1HostgroupsIDPutGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1HostgroupsIDPutGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups Id put gateway timeout response has a 2xx status code
func (o *V1HostgroupsIDPutGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups Id put gateway timeout response has a 3xx status code
func (o *V1HostgroupsIDPutGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups Id put gateway timeout response has a 4xx status code
func (o *V1HostgroupsIDPutGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups Id put gateway timeout response has a 5xx status code
func (o *V1HostgroupsIDPutGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hostgroups Id put gateway timeout response a status code equal to that given
func (o *V1HostgroupsIDPutGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 hostgroups Id put gateway timeout response
func (o *V1HostgroupsIDPutGatewayTimeout) Code() int {
	return 504
}

func (o *V1HostgroupsIDPutGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1HostgroupsIDPutGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/hostgroups/{hostgroup_id}][%d] v1HostgroupsIdPutGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1HostgroupsIDPutGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsIDPutGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
