// Code generated by go-swagger; DO NOT EDIT.

package hostgroups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1HostgroupsGetReader is a Reader for the V1HostgroupsGet structure.
type V1HostgroupsGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostgroupsGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV1HostgroupsGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostgroupsGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1HostgroupsGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostgroupsGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostgroupsGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1HostgroupsGetGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/hostgroups] v1.hostgroups.get", response, response.Code())
	}
}

// NewV1HostgroupsGetOK creates a V1HostgroupsGetOK with default headers values
func NewV1HostgroupsGetOK() *V1HostgroupsGetOK {
	return &V1HostgroupsGetOK{}
}

/*
V1HostgroupsGetOK describes a response with status code 200, with default header values.

OK
*/
type V1HostgroupsGetOK struct {
	Payload models.HostgroupList
}

// IsSuccess returns true when this v1 hostgroups get o k response has a 2xx status code
func (o *V1HostgroupsGetOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 hostgroups get o k response has a 3xx status code
func (o *V1HostgroupsGetOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups get o k response has a 4xx status code
func (o *V1HostgroupsGetOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups get o k response has a 5xx status code
func (o *V1HostgroupsGetOK) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups get o k response a status code equal to that given
func (o *V1HostgroupsGetOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the v1 hostgroups get o k response
func (o *V1HostgroupsGetOK) Code() int {
	return 200
}

func (o *V1HostgroupsGetOK) Error() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetOK  %+v", 200, o.Payload)
}

func (o *V1HostgroupsGetOK) String() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetOK  %+v", 200, o.Payload)
}

func (o *V1HostgroupsGetOK) GetPayload() models.HostgroupList {
	return o.Payload
}

func (o *V1HostgroupsGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsGetBadRequest creates a V1HostgroupsGetBadRequest with default headers values
func NewV1HostgroupsGetBadRequest() *V1HostgroupsGetBadRequest {
	return &V1HostgroupsGetBadRequest{}
}

/*
V1HostgroupsGetBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostgroupsGetBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups get bad request response has a 2xx status code
func (o *V1HostgroupsGetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups get bad request response has a 3xx status code
func (o *V1HostgroupsGetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups get bad request response has a 4xx status code
func (o *V1HostgroupsGetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups get bad request response has a 5xx status code
func (o *V1HostgroupsGetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups get bad request response a status code equal to that given
func (o *V1HostgroupsGetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 hostgroups get bad request response
func (o *V1HostgroupsGetBadRequest) Code() int {
	return 400
}

func (o *V1HostgroupsGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostgroupsGetBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostgroupsGetBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsGetUnauthorized creates a V1HostgroupsGetUnauthorized with default headers values
func NewV1HostgroupsGetUnauthorized() *V1HostgroupsGetUnauthorized {
	return &V1HostgroupsGetUnauthorized{}
}

/*
V1HostgroupsGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1HostgroupsGetUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups get unauthorized response has a 2xx status code
func (o *V1HostgroupsGetUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups get unauthorized response has a 3xx status code
func (o *V1HostgroupsGetUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups get unauthorized response has a 4xx status code
func (o *V1HostgroupsGetUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups get unauthorized response has a 5xx status code
func (o *V1HostgroupsGetUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups get unauthorized response a status code equal to that given
func (o *V1HostgroupsGetUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 hostgroups get unauthorized response
func (o *V1HostgroupsGetUnauthorized) Code() int {
	return 401
}

func (o *V1HostgroupsGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetUnauthorized  %+v", 401, o.Payload)
}

func (o *V1HostgroupsGetUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetUnauthorized  %+v", 401, o.Payload)
}

func (o *V1HostgroupsGetUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsGetForbidden creates a V1HostgroupsGetForbidden with default headers values
func NewV1HostgroupsGetForbidden() *V1HostgroupsGetForbidden {
	return &V1HostgroupsGetForbidden{}
}

/*
V1HostgroupsGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostgroupsGetForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups get forbidden response has a 2xx status code
func (o *V1HostgroupsGetForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups get forbidden response has a 3xx status code
func (o *V1HostgroupsGetForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups get forbidden response has a 4xx status code
func (o *V1HostgroupsGetForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups get forbidden response has a 5xx status code
func (o *V1HostgroupsGetForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups get forbidden response a status code equal to that given
func (o *V1HostgroupsGetForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 hostgroups get forbidden response
func (o *V1HostgroupsGetForbidden) Code() int {
	return 403
}

func (o *V1HostgroupsGetForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetForbidden  %+v", 403, o.Payload)
}

func (o *V1HostgroupsGetForbidden) String() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetForbidden  %+v", 403, o.Payload)
}

func (o *V1HostgroupsGetForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsGetInternalServerError creates a V1HostgroupsGetInternalServerError with default headers values
func NewV1HostgroupsGetInternalServerError() *V1HostgroupsGetInternalServerError {
	return &V1HostgroupsGetInternalServerError{}
}

/*
V1HostgroupsGetInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostgroupsGetInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups get internal server error response has a 2xx status code
func (o *V1HostgroupsGetInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups get internal server error response has a 3xx status code
func (o *V1HostgroupsGetInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups get internal server error response has a 4xx status code
func (o *V1HostgroupsGetInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups get internal server error response has a 5xx status code
func (o *V1HostgroupsGetInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hostgroups get internal server error response a status code equal to that given
func (o *V1HostgroupsGetInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 hostgroups get internal server error response
func (o *V1HostgroupsGetInternalServerError) Code() int {
	return 500
}

func (o *V1HostgroupsGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostgroupsGetInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostgroupsGetInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsGetGatewayTimeout creates a V1HostgroupsGetGatewayTimeout with default headers values
func NewV1HostgroupsGetGatewayTimeout() *V1HostgroupsGetGatewayTimeout {
	return &V1HostgroupsGetGatewayTimeout{}
}

/*
V1HostgroupsGetGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1HostgroupsGetGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups get gateway timeout response has a 2xx status code
func (o *V1HostgroupsGetGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups get gateway timeout response has a 3xx status code
func (o *V1HostgroupsGetGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups get gateway timeout response has a 4xx status code
func (o *V1HostgroupsGetGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups get gateway timeout response has a 5xx status code
func (o *V1HostgroupsGetGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hostgroups get gateway timeout response a status code equal to that given
func (o *V1HostgroupsGetGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 hostgroups get gateway timeout response
func (o *V1HostgroupsGetGatewayTimeout) Code() int {
	return 504
}

func (o *V1HostgroupsGetGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1HostgroupsGetGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v1/hostgroups][%d] v1HostgroupsGetGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1HostgroupsGetGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsGetGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
