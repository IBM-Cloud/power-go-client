// Code generated by go-swagger; DO NOT EDIT.

package hostgroups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// V1HostgroupsPostReader is a Reader for the V1HostgroupsPost structure.
type V1HostgroupsPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V1HostgroupsPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewV1HostgroupsPostCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewV1HostgroupsPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewV1HostgroupsPostUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewV1HostgroupsPostForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewV1HostgroupsPostConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewV1HostgroupsPostUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewV1HostgroupsPostInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewV1HostgroupsPostGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/hostgroups] v1.hostgroups.post", response, response.Code())
	}
}

// NewV1HostgroupsPostCreated creates a V1HostgroupsPostCreated with default headers values
func NewV1HostgroupsPostCreated() *V1HostgroupsPostCreated {
	return &V1HostgroupsPostCreated{}
}

/*
V1HostgroupsPostCreated describes a response with status code 201, with default header values.

Created
*/
type V1HostgroupsPostCreated struct {
	Payload *models.Hostgroup
}

// IsSuccess returns true when this v1 hostgroups post created response has a 2xx status code
func (o *V1HostgroupsPostCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this v1 hostgroups post created response has a 3xx status code
func (o *V1HostgroupsPostCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post created response has a 4xx status code
func (o *V1HostgroupsPostCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups post created response has a 5xx status code
func (o *V1HostgroupsPostCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups post created response a status code equal to that given
func (o *V1HostgroupsPostCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the v1 hostgroups post created response
func (o *V1HostgroupsPostCreated) Code() int {
	return 201
}

func (o *V1HostgroupsPostCreated) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostCreated  %+v", 201, o.Payload)
}

func (o *V1HostgroupsPostCreated) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostCreated  %+v", 201, o.Payload)
}

func (o *V1HostgroupsPostCreated) GetPayload() *models.Hostgroup {
	return o.Payload
}

func (o *V1HostgroupsPostCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Hostgroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsPostBadRequest creates a V1HostgroupsPostBadRequest with default headers values
func NewV1HostgroupsPostBadRequest() *V1HostgroupsPostBadRequest {
	return &V1HostgroupsPostBadRequest{}
}

/*
V1HostgroupsPostBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type V1HostgroupsPostBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups post bad request response has a 2xx status code
func (o *V1HostgroupsPostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups post bad request response has a 3xx status code
func (o *V1HostgroupsPostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post bad request response has a 4xx status code
func (o *V1HostgroupsPostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups post bad request response has a 5xx status code
func (o *V1HostgroupsPostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups post bad request response a status code equal to that given
func (o *V1HostgroupsPostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the v1 hostgroups post bad request response
func (o *V1HostgroupsPostBadRequest) Code() int {
	return 400
}

func (o *V1HostgroupsPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostgroupsPostBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostBadRequest  %+v", 400, o.Payload)
}

func (o *V1HostgroupsPostBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsPostUnauthorized creates a V1HostgroupsPostUnauthorized with default headers values
func NewV1HostgroupsPostUnauthorized() *V1HostgroupsPostUnauthorized {
	return &V1HostgroupsPostUnauthorized{}
}

/*
V1HostgroupsPostUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type V1HostgroupsPostUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups post unauthorized response has a 2xx status code
func (o *V1HostgroupsPostUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups post unauthorized response has a 3xx status code
func (o *V1HostgroupsPostUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post unauthorized response has a 4xx status code
func (o *V1HostgroupsPostUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups post unauthorized response has a 5xx status code
func (o *V1HostgroupsPostUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups post unauthorized response a status code equal to that given
func (o *V1HostgroupsPostUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the v1 hostgroups post unauthorized response
func (o *V1HostgroupsPostUnauthorized) Code() int {
	return 401
}

func (o *V1HostgroupsPostUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostUnauthorized  %+v", 401, o.Payload)
}

func (o *V1HostgroupsPostUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostUnauthorized  %+v", 401, o.Payload)
}

func (o *V1HostgroupsPostUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsPostUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsPostForbidden creates a V1HostgroupsPostForbidden with default headers values
func NewV1HostgroupsPostForbidden() *V1HostgroupsPostForbidden {
	return &V1HostgroupsPostForbidden{}
}

/*
V1HostgroupsPostForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type V1HostgroupsPostForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups post forbidden response has a 2xx status code
func (o *V1HostgroupsPostForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups post forbidden response has a 3xx status code
func (o *V1HostgroupsPostForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post forbidden response has a 4xx status code
func (o *V1HostgroupsPostForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups post forbidden response has a 5xx status code
func (o *V1HostgroupsPostForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups post forbidden response a status code equal to that given
func (o *V1HostgroupsPostForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the v1 hostgroups post forbidden response
func (o *V1HostgroupsPostForbidden) Code() int {
	return 403
}

func (o *V1HostgroupsPostForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostForbidden  %+v", 403, o.Payload)
}

func (o *V1HostgroupsPostForbidden) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostForbidden  %+v", 403, o.Payload)
}

func (o *V1HostgroupsPostForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsPostForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsPostConflict creates a V1HostgroupsPostConflict with default headers values
func NewV1HostgroupsPostConflict() *V1HostgroupsPostConflict {
	return &V1HostgroupsPostConflict{}
}

/*
V1HostgroupsPostConflict describes a response with status code 409, with default header values.

Conflict
*/
type V1HostgroupsPostConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups post conflict response has a 2xx status code
func (o *V1HostgroupsPostConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups post conflict response has a 3xx status code
func (o *V1HostgroupsPostConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post conflict response has a 4xx status code
func (o *V1HostgroupsPostConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups post conflict response has a 5xx status code
func (o *V1HostgroupsPostConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups post conflict response a status code equal to that given
func (o *V1HostgroupsPostConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the v1 hostgroups post conflict response
func (o *V1HostgroupsPostConflict) Code() int {
	return 409
}

func (o *V1HostgroupsPostConflict) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostConflict  %+v", 409, o.Payload)
}

func (o *V1HostgroupsPostConflict) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostConflict  %+v", 409, o.Payload)
}

func (o *V1HostgroupsPostConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsPostConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsPostUnprocessableEntity creates a V1HostgroupsPostUnprocessableEntity with default headers values
func NewV1HostgroupsPostUnprocessableEntity() *V1HostgroupsPostUnprocessableEntity {
	return &V1HostgroupsPostUnprocessableEntity{}
}

/*
V1HostgroupsPostUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type V1HostgroupsPostUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups post unprocessable entity response has a 2xx status code
func (o *V1HostgroupsPostUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups post unprocessable entity response has a 3xx status code
func (o *V1HostgroupsPostUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post unprocessable entity response has a 4xx status code
func (o *V1HostgroupsPostUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this v1 hostgroups post unprocessable entity response has a 5xx status code
func (o *V1HostgroupsPostUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this v1 hostgroups post unprocessable entity response a status code equal to that given
func (o *V1HostgroupsPostUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the v1 hostgroups post unprocessable entity response
func (o *V1HostgroupsPostUnprocessableEntity) Code() int {
	return 422
}

func (o *V1HostgroupsPostUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *V1HostgroupsPostUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *V1HostgroupsPostUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsPostUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsPostInternalServerError creates a V1HostgroupsPostInternalServerError with default headers values
func NewV1HostgroupsPostInternalServerError() *V1HostgroupsPostInternalServerError {
	return &V1HostgroupsPostInternalServerError{}
}

/*
V1HostgroupsPostInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type V1HostgroupsPostInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups post internal server error response has a 2xx status code
func (o *V1HostgroupsPostInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups post internal server error response has a 3xx status code
func (o *V1HostgroupsPostInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post internal server error response has a 4xx status code
func (o *V1HostgroupsPostInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups post internal server error response has a 5xx status code
func (o *V1HostgroupsPostInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hostgroups post internal server error response a status code equal to that given
func (o *V1HostgroupsPostInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the v1 hostgroups post internal server error response
func (o *V1HostgroupsPostInternalServerError) Code() int {
	return 500
}

func (o *V1HostgroupsPostInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostgroupsPostInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostInternalServerError  %+v", 500, o.Payload)
}

func (o *V1HostgroupsPostInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsPostInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewV1HostgroupsPostGatewayTimeout creates a V1HostgroupsPostGatewayTimeout with default headers values
func NewV1HostgroupsPostGatewayTimeout() *V1HostgroupsPostGatewayTimeout {
	return &V1HostgroupsPostGatewayTimeout{}
}

/*
V1HostgroupsPostGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. Request is still processing and taking longer than expected.
*/
type V1HostgroupsPostGatewayTimeout struct {
	Payload *models.Error
}

// IsSuccess returns true when this v1 hostgroups post gateway timeout response has a 2xx status code
func (o *V1HostgroupsPostGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this v1 hostgroups post gateway timeout response has a 3xx status code
func (o *V1HostgroupsPostGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this v1 hostgroups post gateway timeout response has a 4xx status code
func (o *V1HostgroupsPostGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this v1 hostgroups post gateway timeout response has a 5xx status code
func (o *V1HostgroupsPostGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this v1 hostgroups post gateway timeout response a status code equal to that given
func (o *V1HostgroupsPostGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the v1 hostgroups post gateway timeout response
func (o *V1HostgroupsPostGatewayTimeout) Code() int {
	return 504
}

func (o *V1HostgroupsPostGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1HostgroupsPostGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /v1/hostgroups][%d] v1HostgroupsPostGatewayTimeout  %+v", 504, o.Payload)
}

func (o *V1HostgroupsPostGatewayTimeout) GetPayload() *models.Error {
	return o.Payload
}

func (o *V1HostgroupsPostGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
