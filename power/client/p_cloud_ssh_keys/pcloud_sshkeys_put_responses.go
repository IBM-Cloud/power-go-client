// Code generated by go-swagger; DO NOT EDIT.

package p_cloud_ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/IBM-Cloud/power-go-client/power/models"
)

// PcloudSshkeysPutReader is a Reader for the PcloudSshkeysPut structure.
type PcloudSshkeysPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PcloudSshkeysPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPcloudSshkeysPutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPcloudSshkeysPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPcloudSshkeysPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPcloudSshkeysPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPcloudSshkeysPutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPcloudSshkeysPutConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPcloudSshkeysPutGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPcloudSshkeysPutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /v1/ssh-keys/{sshkey_id}] pcloud.sshkeys.put", response, response.Code())
	}
}

// NewPcloudSshkeysPutOK creates a PcloudSshkeysPutOK with default headers values
func NewPcloudSshkeysPutOK() *PcloudSshkeysPutOK {
	return &PcloudSshkeysPutOK{}
}

/*
PcloudSshkeysPutOK describes a response with status code 200, with default header values.

OK
*/
type PcloudSshkeysPutOK struct {
	Payload *models.WorkspaceSSHKey
}

// IsSuccess returns true when this pcloud sshkeys put o k response has a 2xx status code
func (o *PcloudSshkeysPutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pcloud sshkeys put o k response has a 3xx status code
func (o *PcloudSshkeysPutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put o k response has a 4xx status code
func (o *PcloudSshkeysPutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pcloud sshkeys put o k response has a 5xx status code
func (o *PcloudSshkeysPutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pcloud sshkeys put o k response a status code equal to that given
func (o *PcloudSshkeysPutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pcloud sshkeys put o k response
func (o *PcloudSshkeysPutOK) Code() int {
	return 200
}

func (o *PcloudSshkeysPutOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutOK %s", 200, payload)
}

func (o *PcloudSshkeysPutOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutOK %s", 200, payload)
}

func (o *PcloudSshkeysPutOK) GetPayload() *models.WorkspaceSSHKey {
	return o.Payload
}

func (o *PcloudSshkeysPutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WorkspaceSSHKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudSshkeysPutBadRequest creates a PcloudSshkeysPutBadRequest with default headers values
func NewPcloudSshkeysPutBadRequest() *PcloudSshkeysPutBadRequest {
	return &PcloudSshkeysPutBadRequest{}
}

/*
PcloudSshkeysPutBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PcloudSshkeysPutBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this pcloud sshkeys put bad request response has a 2xx status code
func (o *PcloudSshkeysPutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pcloud sshkeys put bad request response has a 3xx status code
func (o *PcloudSshkeysPutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put bad request response has a 4xx status code
func (o *PcloudSshkeysPutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pcloud sshkeys put bad request response has a 5xx status code
func (o *PcloudSshkeysPutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pcloud sshkeys put bad request response a status code equal to that given
func (o *PcloudSshkeysPutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the pcloud sshkeys put bad request response
func (o *PcloudSshkeysPutBadRequest) Code() int {
	return 400
}

func (o *PcloudSshkeysPutBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutBadRequest %s", 400, payload)
}

func (o *PcloudSshkeysPutBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutBadRequest %s", 400, payload)
}

func (o *PcloudSshkeysPutBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudSshkeysPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudSshkeysPutUnauthorized creates a PcloudSshkeysPutUnauthorized with default headers values
func NewPcloudSshkeysPutUnauthorized() *PcloudSshkeysPutUnauthorized {
	return &PcloudSshkeysPutUnauthorized{}
}

/*
PcloudSshkeysPutUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PcloudSshkeysPutUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this pcloud sshkeys put unauthorized response has a 2xx status code
func (o *PcloudSshkeysPutUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pcloud sshkeys put unauthorized response has a 3xx status code
func (o *PcloudSshkeysPutUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put unauthorized response has a 4xx status code
func (o *PcloudSshkeysPutUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pcloud sshkeys put unauthorized response has a 5xx status code
func (o *PcloudSshkeysPutUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pcloud sshkeys put unauthorized response a status code equal to that given
func (o *PcloudSshkeysPutUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the pcloud sshkeys put unauthorized response
func (o *PcloudSshkeysPutUnauthorized) Code() int {
	return 401
}

func (o *PcloudSshkeysPutUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutUnauthorized %s", 401, payload)
}

func (o *PcloudSshkeysPutUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutUnauthorized %s", 401, payload)
}

func (o *PcloudSshkeysPutUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudSshkeysPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudSshkeysPutForbidden creates a PcloudSshkeysPutForbidden with default headers values
func NewPcloudSshkeysPutForbidden() *PcloudSshkeysPutForbidden {
	return &PcloudSshkeysPutForbidden{}
}

/*
PcloudSshkeysPutForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PcloudSshkeysPutForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this pcloud sshkeys put forbidden response has a 2xx status code
func (o *PcloudSshkeysPutForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pcloud sshkeys put forbidden response has a 3xx status code
func (o *PcloudSshkeysPutForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put forbidden response has a 4xx status code
func (o *PcloudSshkeysPutForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this pcloud sshkeys put forbidden response has a 5xx status code
func (o *PcloudSshkeysPutForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this pcloud sshkeys put forbidden response a status code equal to that given
func (o *PcloudSshkeysPutForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the pcloud sshkeys put forbidden response
func (o *PcloudSshkeysPutForbidden) Code() int {
	return 403
}

func (o *PcloudSshkeysPutForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutForbidden %s", 403, payload)
}

func (o *PcloudSshkeysPutForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutForbidden %s", 403, payload)
}

func (o *PcloudSshkeysPutForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudSshkeysPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudSshkeysPutNotFound creates a PcloudSshkeysPutNotFound with default headers values
func NewPcloudSshkeysPutNotFound() *PcloudSshkeysPutNotFound {
	return &PcloudSshkeysPutNotFound{}
}

/*
PcloudSshkeysPutNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PcloudSshkeysPutNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this pcloud sshkeys put not found response has a 2xx status code
func (o *PcloudSshkeysPutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pcloud sshkeys put not found response has a 3xx status code
func (o *PcloudSshkeysPutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put not found response has a 4xx status code
func (o *PcloudSshkeysPutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pcloud sshkeys put not found response has a 5xx status code
func (o *PcloudSshkeysPutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pcloud sshkeys put not found response a status code equal to that given
func (o *PcloudSshkeysPutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the pcloud sshkeys put not found response
func (o *PcloudSshkeysPutNotFound) Code() int {
	return 404
}

func (o *PcloudSshkeysPutNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutNotFound %s", 404, payload)
}

func (o *PcloudSshkeysPutNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutNotFound %s", 404, payload)
}

func (o *PcloudSshkeysPutNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudSshkeysPutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudSshkeysPutConflict creates a PcloudSshkeysPutConflict with default headers values
func NewPcloudSshkeysPutConflict() *PcloudSshkeysPutConflict {
	return &PcloudSshkeysPutConflict{}
}

/*
PcloudSshkeysPutConflict describes a response with status code 409, with default header values.

Conflict
*/
type PcloudSshkeysPutConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this pcloud sshkeys put conflict response has a 2xx status code
func (o *PcloudSshkeysPutConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pcloud sshkeys put conflict response has a 3xx status code
func (o *PcloudSshkeysPutConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put conflict response has a 4xx status code
func (o *PcloudSshkeysPutConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this pcloud sshkeys put conflict response has a 5xx status code
func (o *PcloudSshkeysPutConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this pcloud sshkeys put conflict response a status code equal to that given
func (o *PcloudSshkeysPutConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the pcloud sshkeys put conflict response
func (o *PcloudSshkeysPutConflict) Code() int {
	return 409
}

func (o *PcloudSshkeysPutConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutConflict %s", 409, payload)
}

func (o *PcloudSshkeysPutConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutConflict %s", 409, payload)
}

func (o *PcloudSshkeysPutConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudSshkeysPutConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudSshkeysPutGone creates a PcloudSshkeysPutGone with default headers values
func NewPcloudSshkeysPutGone() *PcloudSshkeysPutGone {
	return &PcloudSshkeysPutGone{}
}

/*
PcloudSshkeysPutGone describes a response with status code 410, with default header values.

Gone
*/
type PcloudSshkeysPutGone struct {
	Payload *models.Error
}

// IsSuccess returns true when this pcloud sshkeys put gone response has a 2xx status code
func (o *PcloudSshkeysPutGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pcloud sshkeys put gone response has a 3xx status code
func (o *PcloudSshkeysPutGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put gone response has a 4xx status code
func (o *PcloudSshkeysPutGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this pcloud sshkeys put gone response has a 5xx status code
func (o *PcloudSshkeysPutGone) IsServerError() bool {
	return false
}

// IsCode returns true when this pcloud sshkeys put gone response a status code equal to that given
func (o *PcloudSshkeysPutGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the pcloud sshkeys put gone response
func (o *PcloudSshkeysPutGone) Code() int {
	return 410
}

func (o *PcloudSshkeysPutGone) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutGone %s", 410, payload)
}

func (o *PcloudSshkeysPutGone) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutGone %s", 410, payload)
}

func (o *PcloudSshkeysPutGone) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudSshkeysPutGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudSshkeysPutInternalServerError creates a PcloudSshkeysPutInternalServerError with default headers values
func NewPcloudSshkeysPutInternalServerError() *PcloudSshkeysPutInternalServerError {
	return &PcloudSshkeysPutInternalServerError{}
}

/*
PcloudSshkeysPutInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PcloudSshkeysPutInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this pcloud sshkeys put internal server error response has a 2xx status code
func (o *PcloudSshkeysPutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pcloud sshkeys put internal server error response has a 3xx status code
func (o *PcloudSshkeysPutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pcloud sshkeys put internal server error response has a 4xx status code
func (o *PcloudSshkeysPutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pcloud sshkeys put internal server error response has a 5xx status code
func (o *PcloudSshkeysPutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pcloud sshkeys put internal server error response a status code equal to that given
func (o *PcloudSshkeysPutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the pcloud sshkeys put internal server error response
func (o *PcloudSshkeysPutInternalServerError) Code() int {
	return 500
}

func (o *PcloudSshkeysPutInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutInternalServerError %s", 500, payload)
}

func (o *PcloudSshkeysPutInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/ssh-keys/{sshkey_id}][%d] pcloudSshkeysPutInternalServerError %s", 500, payload)
}

func (o *PcloudSshkeysPutInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *PcloudSshkeysPutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
